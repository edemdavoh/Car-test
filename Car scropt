-- Roblox Car Script with Drifting
-- Luau script for Delta Executor, detects Barbaro-Red (ID: 15834447839) spawn via TextChatService
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local TextChatService = game:GetService("TextChatService")

local player = Players.LocalPlayer
local character = player.Character
local camera = Workspace.CurrentCamera

-- Car settings
local CAR_MODEL_ID = 15834447839 -- Barbaro-Red car from catalog
local CAR_SPEED = 50 -- Studs per second (~30-40 mph)
local DRIFT_FRICTION = 0.1
local DRIFT_TURN_MULTIPLIER = 1.5
local DRIFT_FORCE = 2000
local CAMERA_SHAKE_INTENSITY = 0.5
local CAMERA_SHAKE_SPEED = 20
local SPAWN_OFFSET = Vector3.new(0, 0, -10)

-- Car components
local carModel
local bodyVelocity
local bodyAngularVelocity
local isDrifting = false

-- Logging function
local function log(msg, level)
    local timestamp = os.date("!%Y-%m-%dT%H:%M:%S.000Z")
    local prefix = "[CarScript v2.14] [" .. timestamp .. "] [" .. (level or "INFO") .. "]"
    if level == "error" then
        warn(prefix .. " " .. msg)
    else
        print(prefix .. " " .. msg)
    end
end

-- Wait for asset to spawn
local function waitForCar()
    local startTime = tick()
    repeat
        for _, model in pairs(Workspace:GetChildren()) do
            if model:IsA("Model") and model.Name:lower():match("barbaro") then
                carModel = model
                log("Detected spawned asset: " .. model.Name)
                break
            end
        end
        if not carModel and tick() - startTime > 5 then
            log("Asset not detected within 5 seconds. Check -gh command support.", "error")
            return
        end
        wait(0.1)
    until carModel
    if carModel then
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        if hrp and carModel:IsDescendantOf(character) then
            carModel.Parent = Workspace
            carModel:MoveTo(hrp.Position + SPAWN_OFFSET)
            log("Detached asset and moved to offset.")
        end
        -- Ensure the model can move
        for _, part in pairs(carModel:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = false
                part.CanCollide = true
            end
        end
    end
end

-- Spawn asset using TextChatService
local function spawnCar()
    local success, err = pcall(function()
        TextChatService.TextChannels.RBXGeneral:SendAsync("-gh " .. CAR_MODEL_ID)
    end)
    if success then
        log("Sent spawn command for Barbaro-Red (ID: " .. CAR_MODEL_ID .. "). Waiting for asset...")
        waitForCar()
    else
        log("Failed to send chat command. Error: " .. tostring(err), "error")
    end
end

-- Setup car
local function setupCar()
    if not carModel then return end
    local primaryPart = carModel:FindFirstChildWhichIsA("BasePart")
    if primaryPart then
        bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(4000, 0, 4000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.Parent = primaryPart

        bodyAngularVelocity = Instance.new("BodyAngularVelocity")
        bodyAngularVelocity.MaxTorque = Vector3.new(0, 4000, 0)
        bodyAngularVelocity.AngularVelocity = Vector3.new(0, 0, 0)
        bodyAngularVelocity.Parent = primaryPart
        log("Car setup complete using first BasePart.")
    else
        log("No BasePart found in asset. Aborting.", "error")
        carModel:Destroy()
    end
end

-- Input handling
local keys = {w = false, a = false, s = false, d = false, shift = false}
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    local key = input.KeyCode
    if key == Enum.KeyCode.W then keys.w = true
    elseif key == Enum.KeyCode.A then keys.a = true
    elseif key == Enum.KeyCode.S then keys.s = true
    elseif key == Enum.KeyCode.D then keys.d = true
    elseif key == Enum.KeyCode.LeftShift or key == Enum.KeyCode.RightShift then
        keys.shift = true
        isDrifting = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    local key = input.KeyCode
    if key == Enum.KeyCode.W then keys.w = false
    elseif key == Enum.KeyCode.A then keys.a = false
    elseif key == Enum.KeyCode.S then keys.s = false
    elseif key == Enum.KeyCode.D then keys.d = false
    elseif key == Enum.KeyCode.LeftShift or key == Enum.KeyCode.RightShift then
        keys.shift = false
        isDrifting = false
    end
end)

-- Movement and drifting
local lastTime = tick()
RunService.Heartbeat:Connect(function()
    if not carModel or not carModel:FindFirstChildWhichIsA("BasePart") then return end

    local dt = tick() - lastTime
    lastTime = tick()

    local primaryPart = carModel:FindFirstChildWhichIsA("BasePart")
    if not primaryPart then return end

    local moveVector = Vector3.new(0, 0, 0)
    if keys.w then moveVector = moveVector + primaryPart.CFrame.LookVector * CAR_SPEED
    elseif keys.s then moveVector = moveVector - primaryPart.CFrame.LookVector * CAR_SPEED end

    local turnSpeed = keys.a and -2 or (keys.d and 2 or 0)
    if isDrifting then
        turnSpeed = turnSpeed * DRIFT_TURN_MULTIPLIER
        local driftForce = primaryPart.CFrame.RightVector * (keys.a and -DRIFT_FORCE or (keys.d and DRIFT_FORCE or 0))
        bodyVelocity.MaxForce = Vector3.new(4000 + DRIFT_FORCE, 0, 4000 + DRIFT_FORCE)
        bodyVelocity.Velocity = moveVector + driftForce
        camera.CFrame = camera.CFrame * CFrame.Angles(0, 0, math.rad(turnSpeed * 5 * dt))
    else
        bodyVelocity.MaxForce = Vector3.new(4000, 0, 4000)
        bodyVelocity.Velocity = moveVector
    end
    bodyAngularVelocity.AngularVelocity = Vector3.new(0, turnSpeed, 0)

    if primaryPart.Velocity.Magnitude > 5 then
        local shakeIntensity = isDrifting and CAMERA_SHAKE_INTENSITY * 1.5 or CAMERA_SHAKE_INTENSITY
        local shake = math.sin(tick() * CAMERA_SHAKE_SPEED) * shakeIntensity * dt
        camera.CFrame = camera.CFrame * CFrame.new(shake, shake * 0.5, 0)
    end
end)

-- Camera setup
local function updateCamera()
    if carModel and carModel:FindFirstChildWhichIsA("BasePart") then
        camera.CameraType = Enum.CameraType.Follow
        camera.CameraSubject = carModel:FindFirstChildWhichIsA("BasePart")
        camera.FieldOfView = 70
    end
end

-- Anti-cheat bypass
local function bypassAntiCheat()
    if getrawmetatable then
        local mt = getrawmetatable(game)
        setreadonly(mt, false)
        local oldIndex = mt.__index
        mt.__index = function(self, key)
            if key == "Anchored" or key == "Locked" then return false end
            return oldIndex(self, key)
        end
        setreadonly(mt, true)
    end
    log("Applied basic anti-cheat bypass.")
end

-- Initialize
local function init()
    if not player.Character then
        log("Waiting for character to load.", "error")
        player.CharacterAdded:Wait()
    end
    bypassAntiCheat()
    spawnCar()
    setupCar()
    updateCamera()
end

init()
log("Barbaro-Red car script with drifting loaded. Use WASD to drive, Shift to drift. Speed: " .. CAR_SPEED .. " studs/s.")
