-- Roblox Car Script with Realistic Suspension, Camera Shakes, and Drifting
-- Executor-friendly: Uses HTTP to fetch car model (ID: 15834447839)
-- No InsertService, works with Delta Executor
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
local camera = Workspace.CurrentCamera

-- Enable HTTP requests
if not game:GetService("HttpService"):GetHttpEnabled() then
    game:GetService("HttpService").HttpEnabled = true
end

-- Car settings
local CAR_MODEL_ID = 15834447839 -- Your car model ID
local CAR_SPEED = 50 -- Studs per second (~30-40 mph)
local SUSPENSION_STRENGTH = 100
local SUSPENSION_DAMPING = 10
local CAMERA_SHAKE_INTENSITY = 0.5
local CAMERA_SHAKE_SPEED = 20
local DRIFT_FRICTION = 0.1
local DRIFT_TURN_MULTIPLIER = 1.5
local DRIFT_FORCE = 2000
local WHEEL_SEARCH_DEPTH = 2

-- Car components
local carModel
local chassis
local wheels = {}
local cameraPart
local bodyVelocity
local bodyAngularVelocity
local isDrifting = false

-- Logging function
local function log(msg, level)
    local timestamp = os.date("!%Y-%m-%dT%H:%M:%S.000Z")
    local prefix = "[CarScript v2.5] [" .. timestamp .. "] [" .. (level or "INFO") .. "]"
    if level == "error" then
        warn(prefix .. " " .. msg)
    else
        print(prefix .. " " .. msg)
    end
end

-- Fetch and spawn car model via HTTP
local function fetchCar()
    local assetUrl = "https://assetdelivery.roblox.com/v1/asset/?id=" .. CAR_MODEL_ID
    local success, response = pcall(function()
        return game:HttpGet(assetUrl)
    end)
    if success and response then
        carModel = Instance.new("Model")
        carModel.Name = "CustomCar"
        carModel.Parent = Workspace

        -- Simple XML parsing (basic recreationâ€”assumes RBXM format)
        local xmlData = response
        local position = player.Character.HumanoidRootPart.Position + Vector3.new(0, 5, 0)
        local function parseXML(data, parent)
            local currentPos = 1
            while currentPos <= #data do
                local startTag = data:find("<Item", currentPos)
                if not startTag then break end
                local endTag = data:find("</Item>", startTag)
                if endTag then
                    local itemData = data:sub(startTag, endTag + 6)
                    local className = itemData:match('class="([^"]+)"')
                    if className and className:lower() == "part" then
                        local part = Instance.new("Part")
                        part.Name = itemData:match('name="([^"]+)"') or "Part"
                        part.Size = Vector3.new(5, 1, 8) -- Default size, adjust if XML has size
                        part.Position = position
                        part.Anchored = false
                        part.CanCollide = true
                        part.Parent = carModel
                        if part.Name:lower() == "chassis" then
                            chassis = part
                            chassis.Position = position
                        elseif part.Name:lower():match("wheel") then
                            table.insert(wheels, part)
                            part.Shape = Enum.PartType.Cylinder
                            part.Size = Vector3.new(1.5, 1, 1.5)
                            part.Position = position + Vector3.new(#wheels == 1 and -2 or (#wheels == 2 and 2 or (#wheels == 3 and -2 or 2)), -0.5, #wheels <= 2 and -3 or 3)
                        end
                    end
                    currentPos = endTag + 1
                end
            end
        end

        parseXML(response, carModel)
        if chassis and #wheels >= 4 then
            log("Car fetched and spawned successfully (ID: " .. CAR_MODEL_ID .. ").")
        else
            log("Failed to parse car model. Falling back to basic setup.", "error")
            createFallbackCar()
        end
    else
        log("HTTP fetch failed for ID: " .. CAR_MODEL_ID .. ". Error: " .. tostring(response), "error")
        createFallbackCar()
    end
end

-- Create fallback car if HTTP fails
local function createFallbackCar()
    carModel = Instance.new("Model")
    carModel.Name = "FallbackCar"
    carModel.Parent = Workspace

    chassis = Instance.new("Part")
    chassis.Name = "Chassis"
    chassis.Size = Vector3.new(5, 1, 8)
    chassis.Position = player.Character.HumanoidRootPart.Position + Vector3.new(0, 5, 0)
    chassis.Anchored = false
    chassis.CanCollide = true
    chassis.BrickColor = BrickColor.new("Bright blue")
    chassis.Parent = carModel

    local wheelPositions = {
        {x = -2, z = -3}, {x = 2, z = -3}, {x = -2, z = 3}, {x = 2, z = 3}
    }
    for i, pos in pairs(wheelPositions) do
        local wheel = Instance.new("Part")
        wheel.Name = "Wheel" .. i
        wheel.Shape = Enum.PartType.Cylinder
        wheel.Size = Vector3.new(1.5, 1, 1.5)
        wheel.Position = chassis.Position + Vector3.new(pos.x, -0.5, pos.z)
        wheel.Anchored = false
        wheel.CanCollide = true
        wheel.CustomPhysicalProperties = PhysicalProperties.new(1, 0.8, 0.5, 1, 1)
        wheel.BrickColor = BrickColor.new("Black")
        wheel.Parent = carModel
        wheels[i] = wheel
    end

    cameraPart = chassis
    log("Fallback car created.")
end

-- Setup car components
local function setupCar()
    if not carModel or not chassis then return end

    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(4000, 0, 4000)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = chassis

    bodyAngularVelocity = Instance.new("BodyAngularVelocity")
    bodyAngularVelocity.MaxTorque = Vector3.new(0, 4000, 0)
    bodyAngularVelocity.AngularVelocity = Vector3.new(0, 0, 0)
    bodyAngularVelocity.Parent = chassis

    for i, wheel in pairs(wheels) do
        if wheel then
            local spring = Instance.new("SpringConstraint")
            spring.Attachment0 = Instance.new("Attachment", chassis)
            spring.Attachment1 = Instance.new("Attachment", wheel)
            spring.Stiffness = SUSPENSION_STRENGTH
            spring.Damping = SUSPENSION_DAMPING
            spring.FreeLength = (chassis.Position - wheel.Position).Magnitude
            spring.Parent = chassis
            spring.Name = "SpringConstraint" .. i
        end
    end

    log("Car setup complete.")
end

-- Input handling
local keys = {w = false, a = false, s = false, d = false, shift = false}
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    local key = input.KeyCode
    if key == Enum.KeyCode.W then keys.w = true
    elseif key == Enum.KeyCode.A then keys.a = true
    elseif key == Enum.KeyCode.S then keys.s = true
    elseif key == Enum.KeyCode.D then keys.d = true
    elseif key == Enum.KeyCode.LeftShift or key == Enum.KeyCode.RightShift then
        keys.shift = true
        isDrifting = true
        log("Drift mode activated.")
        for _, wheel in pairs(wheels) do
            if wheel then wheel.CustomPhysicalProperties = PhysicalProperties.new(1, DRIFT_FRICTION, 0.5, 1, 1) end
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    local key = input.KeyCode
    if key == Enum.KeyCode.W then keys.w = false
    elseif key == Enum.KeyCode.A then keys.a = false
    elseif key == Enum.KeyCode.S then keys.s = false
    elseif key == Enum.KeyCode.D then keys.d = false
    elseif key == Enum.KeyCode.LeftShift or key == Enum.KeyCode.RightShift then
        keys.shift = false
        isDrifting = false
        log("Drift mode deactivated.")
        for _, wheel in pairs(wheels) do
            if wheel then wheel.CustomPhysicalProperties = PhysicalProperties.new(1, 0.8, 0.5, 1, 1) end
        end
    end
end)

-- Movement, suspension, and drifting
local lastTime = tick()
RunService.Heartbeat:Connect(function()
    if not chassis then return end

    local dt = tick() - lastTime
    lastTime = tick()

    local moveVector = Vector3.new(0, 0, 0)
    if keys.w then moveVector = moveVector + chassis.CFrame.LookVector * CAR_SPEED
    elseif keys.s then moveVector = moveVector - chassis.CFrame.LookVector * CAR_SPEED end

    local turnSpeed = keys.a and -2 or (keys.d and 2 or 0)
    if isDrifting then
        turnSpeed = turnSpeed * DRIFT_TURN_MULTIPLIER
        local driftForce = chassis.CFrame.RightVector * (keys.a and -DRIFT_FORCE or (keys.d and DRIFT_FORCE or 0))
        bodyVelocity.MaxForce = Vector3.new(4000 + DRIFT_FORCE, 0, 4000 + DRIFT_FORCE)
        bodyVelocity.Velocity = moveVector + driftForce
        camera.CFrame = camera.CFrame * CFrame.Angles(0, 0, math.rad(turnSpeed * 5 * dt))
    else
        bodyVelocity.MaxForce = Vector3.new(4000, 0, 4000)
        bodyVelocity.Velocity = moveVector
    end
    bodyAngularVelocity.AngularVelocity = Vector3.new(0, turnSpeed, 0)

    for i, wheel in pairs(wheels) do
        if wheel and wheel.Parent then
            local spring = chassis:FindFirstChild("SpringConstraint" .. i)
            if spring then
                local raycast = Workspace:Raycast(wheel.Position, Vector3.new(0, -10, 0))
                if raycast then spring.FreeLength = math.clamp((chassis.Position - raycast.Position).Magnitude, 0.5, 2) end
            end
        end
    end

    if chassis.Velocity.Magnitude > 5 then
        local shakeIntensity = isDrifting and CAMERA_SHAKE_INTENSITY * 1.5 or CAMERA_SHAKE_INTENSITY
        local shake = math.sin(tick() * CAMERA_SHAKE_SPEED) * shakeIntensity * dt
        camera.CFrame = camera.CFrame * CFrame.new(shake, shake * 0.5, 0)
    end
end)

-- Camera setup
local function updateCamera()
    if cameraPart then
        camera.CameraType = Enum.CameraType.Follow
        camera.CameraSubject = cameraPart
        camera.FieldOfView = 70
    end
end

-- Anti-cheat bypass
local function bypassAntiCheat()
    if getrawmetatable then
        local mt = getrawmetatable(game)
        setreadonly(mt, false)
        local oldIndex = mt.__index
        mt.__index = function(self, key)
            if key == "Anchored" or key == "Locked" then return false end
            return oldIndex(self, key)
        end
        setreadonly(mt, true)
    end
    log("Applied basic anti-cheat bypass.")
end

-- Initialize
local function init()
    if not player.Character then
        log("Waiting for character to load.", "error")
        player.CharacterAdded:Wait()
    end
    bypassAntiCheat()
    fetchCar()
    setupCar()
    updateCamera()
end

init()
log("Roblox car script with drifting loaded. Use WASD to drive, Shift to drift. Speed: " .. CAR_SPEED .. " studs/s.")
